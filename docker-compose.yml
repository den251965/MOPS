version: "3.8"

services:
  iotcontroller:
    build: server_iot/
    command: python ./server_iot.py
    image: iotcontroller:latest
    ports: 
      - 8080:8080
    depends_on:
      - rabbitmq
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure 
    networks:
     iot:       
       aliases:
         - iotcontroller 
          
  rule:
    build: ./rule_engine/
    #command: python ./rule_engine.py
    image: rule:latest
    ports:
      - 8081:8081
    depends_on:
      - mongodb
      - rabbitmq
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    networks:
      iot:
        aliases:
          - rule
        
  rabbitmq:
    image: rabbitmq:management
    hostname: rabbitmq_server
    container_name: rabbitmq_server
    ports:
      - 5672:5672
      - 15672:15672
      - 15692:15692  #prometheus
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      iot:
        aliases:
          - rabbitmq
          
  mongodb:
    image: mongo
    container_name: mongo_server
    ports:
      - 27018:27017
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      iot:
        aliases:
          - mongodb
         
  prometheus:
    image: prom/prometheus
    ports:
      - 9091:9090
    volumes:
      - ./config:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      iot:
        aliases:
          - prometheus      
    deploy:
      replicas: 1

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - 3001:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_1
    networks:
      iot:
        aliases:
          - grafana
    deploy:
      replicas: 1      
 
volumes:
  rabbitmq_data:
  
networks:
  iot:
    driver: bridge
     
      
